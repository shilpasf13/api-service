AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
   dayforce-concord-integration
Parameters:
  NodeEnvironment:
    Type: String
    Description: The NodeJS environment
    Default: development
    AllowedValues:
      - development
      - staging
      - production
  QueueUrl:
    Type: String
    Description: The Event Queue URL
    Default: "https://sqs.us-east-1.amazonaws.com/637423183217/DayforceConcordEventQueue"
  DLQUrl:
    Type: String
    Description: The Dead Letter Queue URL
    Default: "https://sqs.us-east-1.amazonaws.com/637423183217/DayforceConcordDeadLetterQueue"
  TargetSystemApiUrl:
    Type: String
    Description: Target System API URL
    Default: "https://uat.concordnow.com/api/rest/1/organizations/1272/auto/"
  ApiSecret:
    Type: String
    Description: API Secret stored in Secret Manager
    Default: /dev/apisecret
Globals:
  Function:
    Runtime: nodejs16.x
    Timeout: 900
    Environment:
      Variables:
        NODE_ENV: !Ref NodeEnvironment
        QUEUE_URL: !Ref QueueUrl
        DLQ_URL: !Ref DLQUrl
        TARGET_SYSTEM_API_URL: !Ref TargetSystemApiUrl
        API_SECRET: !Ref ApiSecret
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "SendMessageToDayforceConcordEventQueue"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sqs:SendMessage"
                Resource: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:DayforceConcordEventQueue"
        - PolicyName: "SendMessageToDayforceConcordDeadLetterQueue"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sqs:SendMessage"
                Resource: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:DayforceConcordDeadLetterQueue"
        - PolicyName: "AccessDynamoDBTable"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:UpdateItem"
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/DayforceConcordEventTable"
        - PolicyName: "SecretsManagerPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "secretsmanager:GetSecretValue"
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ApiSecret}*"
        - PolicyName: "ReceiveMessagesFromQueue"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sqs:ReceiveMessage"
                Resource:
                  - !GetAtt DayforceConcordEventQueue.Arn
                  - !GetAtt DayforceConcordDeadLetterQueue.Arn
        - PolicyName: "DeleteMessagesFromQueue"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sqs:DeleteMessage"
                Resource:
                  - !GetAtt DayforceConcordEventQueue.Arn
                  - !GetAtt DayforceConcordDeadLetterQueue.Arn
        - PolicyName: "GetQueueAttributesFromQueue"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sqs:GetQueueAttributes"
                Resource:
                  - !GetAtt DayforceConcordEventQueue.Arn
                  - !GetAtt DayforceConcordDeadLetterQueue.Arn
        - PolicyName: "CloudWatchLogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/QueueHandler*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/TransformHandler*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DLQHandler*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/AuthHandler*"

  AuthHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: src/functions/AuthorizerHandler
      FunctionName: AuthHandler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 900
  QueueHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: src/functions/QueueHandler
      FunctionName: QueueHandler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 900
      Events:
        SubscribeEvent:
          Type: Api
          Properties:
            Path: /subscribe
            Method: post
            RestApiId: !Ref DayforceSourceApi

  TransformHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: src/functions/TransformHandler
      FunctionName: TransformHandler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 900
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DayforceConcordEventQueue.Arn
  DLQHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: src/functions/DLQHandler
      FunctionName: DLQHandler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 900
      Events:
        DLQEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DayforceConcordDeadLetterQueue.Arn
  DayforceConcordEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: DayforceConcordEventQueue
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DayforceConcordDeadLetterQueue.Arn
        maxReceiveCount: 3
  DayforceConcordDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: DayforceConcordDeadLetterQueue
      VisibilityTimeout: 900
  DayforceConcordEventTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DayforceConcordEventTable
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "createdAt"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "createdAt"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  DayforceSourceApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref NodeEnvironment
      Auth:
        DefaultAuthorizer: LambdaAuthorizer
        Authorizers:
          LambdaAuthorizer:
            FunctionArn: !GetAtt AuthHandler.Arn
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "dayforce-source-api"
          version: "1.0.0"
        paths:
          /subscribe:
            post:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueueHandler.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
